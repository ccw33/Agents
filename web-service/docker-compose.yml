# AI Agent Web Service Docker Compose配置
version: '3.8'

services:
  # Web服务
  web-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: web-service
    hostname: web-service
    ports:
      - "8080:8000"  # 映射到本机8080端口，避免与nginx冲突
      - "8000:8000"  # 保留原端口用于直接调试
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - DEBUG=true   # 调试模式
      # 模拟K8s ConfigMap环境变量
      - APP_NAME=AI Agent Web Service
      - VERSION=1.0.0
      - LOG_LEVEL=DEBUG
      - LOG_FORMAT=json
      - AGENT_FRAMEWORKS_PATH=/app/agent-frameworks
      - LANGGRAPH_PATH=/app/agent-frameworks/langgraph
      - AGENT_TIMEOUT=300
      - MAX_CONCURRENT_AGENTS=10
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      # 服务发现配置（模拟K8s环境）
      - WEB_SERVICE_HOST=web-service.ai-agents.svc.cluster.local
      - WEB_SERVICE_PORT=80
    env_file:
      - .env
    volumes:
      # 挂载agent-frameworks目录
      - ../agent-frameworks:/app/agent-frameworks:ro
      # 挂载日志目录
      - ./logs:/app/logs
      # 挂载原型输出目录（模拟K8s emptyDir）
      - prototype-outputs:/app/agent-frameworks/langgraph/prototype_design/outputs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      ai-agents:
        aliases:
          # K8s集群内网域名别名
          - web-service.ai-agents.svc.cluster.local
          - web-service

  # 可选：Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: ai-agent-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - ai-agents
    profiles:
      - with-redis

  # 可选：PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: ai-agent-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=ai_agent
      - POSTGRES_USER=ai_agent
      - POSTGRES_PASSWORD=ai_agent_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - ai-agents
    profiles:
      - with-database

  # 可选：Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: ai-agent-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - web-service
    restart: unless-stopped
    networks:
      - ai-agents
    profiles:
      - with-nginx

volumes:
  redis_data:
  postgres_data:
  prototype-outputs:  # 模拟K8s emptyDir卷

networks:
  ai-agents:
    name: ai-agents
    driver: bridge
