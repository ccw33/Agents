# Secret配置模板 - 敏感信息
# 用法：
# 1. 将 {{}} 占位符替换为实际值
# 2. 所有敏感数据需要base64编码：echo -n "your-secret" | base64
# 3. 生产环境中请使用外部密钥管理系统（如 Vault, AWS Secrets Manager）

apiVersion: v1
kind: Secret
metadata:
  name: {{APP_NAME}}-secrets
  namespace: {{NAMESPACE_NAME}}
  labels:
    app: {{APP_NAME}}
    component: secrets
    version: {{VERSION}}
  annotations:
    description: "敏感配置信息"
    created-by: "{{CREATED_BY}}"
type: Opaque
data:
  # 应用密钥
  # echo -n "your-secret-key" | base64
  SECRET_KEY: {{SECRET_KEY_BASE64}}
  
  # JWT密钥
  # echo -n "your-jwt-secret" | base64
  JWT_SECRET: {{JWT_SECRET_BASE64}}
  
  # 数据库连接信息
  # echo -n "username" | base64
  DB_USERNAME: {{DB_USERNAME_BASE64}}
  # echo -n "password" | base64
  DB_PASSWORD: {{DB_PASSWORD_BASE64}}
  # echo -n "postgresql://user:pass@host:5432/dbname" | base64
  DATABASE_URL: {{DATABASE_URL_BASE64}}
  
  # Redis连接信息
  # echo -n "redis-password" | base64
  REDIS_PASSWORD: {{REDIS_PASSWORD_BASE64}}
  # echo -n "redis://user:pass@host:6379/0" | base64
  REDIS_URL: {{REDIS_URL_BASE64}}
  
  # API密钥
  # echo -n "your-api-key" | base64
  API_KEY: {{API_KEY_BASE64}}
  
  # 第三方服务API密钥
  # OpenAI API密钥
  # echo -n "sk-your-openai-key" | base64
  OPENAI_API_KEY: {{OPENAI_API_KEY_BASE64}}
  
  # AWS访问密钥
  # echo -n "AKIAIOSFODNN7EXAMPLE" | base64
  AWS_ACCESS_KEY_ID: {{AWS_ACCESS_KEY_ID_BASE64}}
  # echo -n "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY" | base64
  AWS_SECRET_ACCESS_KEY: {{AWS_SECRET_ACCESS_KEY_BASE64}}
  
  # Google Cloud服务账号密钥
  # echo -n '{"type":"service_account",...}' | base64
  GOOGLE_APPLICATION_CREDENTIALS: {{GOOGLE_CREDENTIALS_BASE64}}
  
  # 邮件服务配置
  # echo -n "smtp-username" | base64
  SMTP_USERNAME: {{SMTP_USERNAME_BASE64}}
  # echo -n "smtp-password" | base64
  SMTP_PASSWORD: {{SMTP_PASSWORD_BASE64}}
  
  # 监控和追踪服务密钥
  # echo -n "datadog-api-key" | base64
  DATADOG_API_KEY: {{DATADOG_API_KEY_BASE64}}
  # echo -n "newrelic-license-key" | base64
  NEWRELIC_LICENSE_KEY: {{NEWRELIC_LICENSE_KEY_BASE64}}

---
# TLS证书Secret模板
apiVersion: v1
kind: Secret
metadata:
  name: {{APP_NAME}}-tls
  namespace: {{NAMESPACE_NAME}}
  labels:
    app: {{APP_NAME}}
    component: tls
    version: {{VERSION}}
type: kubernetes.io/tls
data:
  # TLS证书（base64编码的PEM格式）
  # cat cert.pem | base64 -w 0
  tls.crt: {{TLS_CERT_BASE64}}
  # TLS私钥（base64编码的PEM格式）
  # cat key.pem | base64 -w 0
  tls.key: {{TLS_KEY_BASE64}}

---
# Docker Registry Secret模板（如果使用私有镜像仓库）
apiVersion: v1
kind: Secret
metadata:
  name: {{APP_NAME}}-registry
  namespace: {{NAMESPACE_NAME}}
  labels:
    app: {{APP_NAME}}
    component: registry
    version: {{VERSION}}
type: kubernetes.io/dockerconfigjson
data:
  # Docker配置文件（base64编码）
  # kubectl create secret docker-registry myregistrykey \
  #   --docker-server=DOCKER_REGISTRY_SERVER \
  #   --docker-username=DOCKER_USER \
  #   --docker-password=DOCKER_PASSWORD \
  #   --docker-email=DOCKER_EMAIL \
  #   --dry-run=client -o yaml | grep '.dockerconfigjson:' | cut -d' ' -f4
  .dockerconfigjson: {{DOCKER_CONFIG_BASE64}}

---
# SSH密钥Secret模板（如果需要Git访问）
apiVersion: v1
kind: Secret
metadata:
  name: {{APP_NAME}}-ssh
  namespace: {{NAMESPACE_NAME}}
  labels:
    app: {{APP_NAME}}
    component: ssh
    version: {{VERSION}}
type: kubernetes.io/ssh-auth
data:
  # SSH私钥（base64编码）
  # cat ~/.ssh/id_rsa | base64 -w 0
  ssh-privatekey: {{SSH_PRIVATE_KEY_BASE64}}

---
# 基本认证Secret模板
apiVersion: v1
kind: Secret
metadata:
  name: {{APP_NAME}}-basic-auth
  namespace: {{NAMESPACE_NAME}}
  labels:
    app: {{APP_NAME}}
    component: auth
    version: {{VERSION}}
type: kubernetes.io/basic-auth
data:
  # 用户名（base64编码）
  # echo -n "admin" | base64
  username: {{BASIC_AUTH_USERNAME_BASE64}}
  # 密码（base64编码）
  # echo -n "password" | base64
  password: {{BASIC_AUTH_PASSWORD_BASE64}}

---
# 通用Secret模板 - 字符串数据（不需要base64编码）
apiVersion: v1
kind: Secret
metadata:
  name: {{APP_NAME}}-config
  namespace: {{NAMESPACE_NAME}}
  labels:
    app: {{APP_NAME}}
    component: config-secrets
    version: {{VERSION}}
type: Opaque
stringData:
  # 使用stringData字段可以直接写入明文，Kubernetes会自动进行base64编码
  # 这种方式更适合在模板中使用
  secret-key: "{{SECRET_KEY}}"
  jwt-secret: "{{JWT_SECRET}}"
  db-username: "{{DB_USERNAME}}"
  db-password: "{{DB_PASSWORD}}"
  api-key: "{{API_KEY}}"
  
  # 配置文件格式的密钥
  database.conf: |
    host={{DB_HOST}}
    port={{DB_PORT}}
    username={{DB_USERNAME}}
    password={{DB_PASSWORD}}
    database={{DB_NAME}}
    sslmode=require
  
  # JSON格式的配置
  service-account.json: |
    {
      "type": "service_account",
      "project_id": "{{PROJECT_ID}}",
      "private_key_id": "{{PRIVATE_KEY_ID}}",
      "private_key": "{{PRIVATE_KEY}}",
      "client_email": "{{CLIENT_EMAIL}}",
      "client_id": "{{CLIENT_ID}}",
      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
      "token_uri": "https://oauth2.googleapis.com/token"
    }
